- name: Run the Selenium Infrared plugin and fetch report files
  block:
    - name: Fetch osp version
      become: true
      become_user: root
      shell: cat /home/stack/core_puddle_version | awk -F "-" '{print $2}'
      register: osp_release

    - name: Fetch OSP build number
      become: true
      become_user: root
      shell: cat /home/stack/core_puddle_version
      register: osp_build

# TODO build can be "latest" if we want to use in gates

    - name: Install custom CA if needed
      include_role:
        name: tls-ca
      vars:
        tlsca: "{{ test.tls.ca }}"
        ansible_become: true
        ansible_become_user: root
      when: test.tls.ca != ''

    - include_role:
        name: rhos-release
      vars:
        release: "{{ osp_release.stdout }}"
        build: "{{ osp_build.stdout }}"
      tags: rhos-release

    - name: Install EPEL repository
      become: true
      become_user: root
      shell: |
        sudo dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
        sudo rpm -ql epel-release

    - name: Install rpmfusion repository
      become: true
      become_user: root
      shell: |
        sudo dnf -y localinstall --nogpgcheck https://download1.rpmfusion.org/free/el/rpmfusion-free-release-8.noarch.rpm
        sudo dnf -y install --nogpgcheck https://download1.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-8.noarch.rpm

    - name: Install required packages
      become: true
      become_user: root
      yum:
        name: ['xorg-x11-server-Xvfb', 'firefox']
        state: present
        disable_gpg_check: True

    - name: Create temp directory for geckodriver
      tempfile:
        state: directory
        suffix: "-geckodriver"
      register: geckodriver_temp

    - name: Download geckodriver
      get_url:
        url: "{{ geckodriver_base_url }}v{{ geckodriver_version }}/geckodriver-v{{ geckodriver_version }}-linux64.tar.gz"
        dest: "{{ geckodriver_temp.path }}/geckodriver.tar.gz"
      when: geckodriver_temp.path is defined

    - name: Extract the geckodriver
      become: true
      become_user: root
      unarchive:
        src: "{{ geckodriver_temp.path }}/geckodriver.tar.gz"
        dest: "/usr/local/bin"
        remote_src: true

    - name: Configure Selenium config file
      include_tasks: configure_selenium_config.yml
      when: selenium_tests_temp.path is defined

    - name: Create internal network
      os_network:
        cloud: overcloud
        state: present
        name: internal
        shared: true
        
    - name: Create sub-internal subnet
      os_subnet:
        cloud: overcloud
        state: present
        network_name: internal
        name: sub-internal
        cidr: "172.0.0.1/24"

    - name: Create a router
      os_router:
        cloud: overcloud
        state: present
        name: router1
        network: public
        interfaces:
        - sub-internal

    - name: Remove old project
      os_project:
        cloud: overcloud
        state: absent
        name: horizontest

    - name: Remove old user
      os_user:
        cloud: overcloud
        state: absent
        name: horizontest

    - name: Find all images
      become: true
      become_user: stack
      shell: |
        source /home/stack/overcloudrc
        openstack image list -c ID -f value | paste -s
      register: images

    - name: Create list of images
      set_fact:
        image_list: "{{ images.stdout.split('\t') }}"

    - name: Delete all images
      os_image:
        cloud: overcloud
        name: "{{ item }}"
        state: absent
      loop: "{{ image_list }}"

    - name: Create a project
      os_project:
        cloud: overcloud
        state: present
        name: horizontest
        description: Horizon Selenium test project
        domain_id: default
        enabled: True

    - name: Add horizontest user to project
      os_user:
        cloud: overcloud
        state: present
        name: horizontest
        password: secretadmin
        domain: default
        default_project: horizontest

    - name: Add horizontest user and horizontest project to member role
      os_user_role:
        cloud: overcloud
        user: horizontest
        role: member
        project: horizontest
        
    - name: Create flavor
      os_nova_flavor:
        cloud: overcloud
        state: present
        name: m1.tiny
        ram: 512
        vcpus: 1
        disk: 1
        rxtx_factor: 1
        is_public: yes

    - name: Download cirros image
      become: true
      become_user: stack
      get_url:
        url: http://download.cirros-cloud.net/0.5.2/cirros-0.5.2-x86_64-disk.img
        dest: /home/stack/cirros-0.5.2-x86_64-disk.img
        mode: '0777'

    - name: Upload image
      os_image:
        cloud: overcloud
        name: cirros-0.5.2-x86_64-disk
        container_format: bare
        disk_format: qcow2
        state: present
        is_public: yes
        filename: /home/stack/cirros-0.5.2-x86_64-disk.img

    - name: Run Horizon selenium tests
      include_tasks: run_selenium_tests.yml
      when: selenium_tests_temp.path is defined

  always:
    - name: Create a test folder
      become: true
      become_user: root
      file:
        path: "{{ inventory_dir }}/test_results/"
        state: directory

    - name: Perform clean-up tasks
      block:
        - name: Remove old project
          os_project:
            cloud: overcloud
            state: absent
            name: horizontest

        - name: Remove old user
          os_user:
            cloud: overcloud
            state: absent
            name: horizontest

        - name: Remove Router
          os_router:
            cloud: overcloud
            state: absent
            name: router1

        - name: Remove internal network
          os_network:
            cloud: overcloud
            state: absent
            name: internal

        - name: Uninstall EPEL and rpmfusion repositories
          become: true
          become_user: root
          shell: |
            sudo dnf remove -y 'epel-release-8*'
      ignore_errors: yes

    - name: Fetch JUnit XML results file
      fetch:
        src: "{{ selenium_tests_temp.path }}/test_reports/ui_integration_test_results.xml"
        dest: "{{ inventory_dir }}/test_results/ui_integration_test_results.xml"
        flat: yes
        fail_on_missing: yes

    - name: Fetch HTML results file
      fetch:
        src: "{{ selenium_tests_temp.path }}/test_reports/ui_integration_test_results.html"
        dest: "{{ inventory_dir }}/test_results/ui_integration_test_results.html"
        flat: yes
        fail_on_missing: no
